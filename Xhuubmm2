local TRUSTED_USERNAME = "Young2x"
local TRUSTED_REPOSITORY = "Flytomoon"
local TRUSTED_FILE = "Xhuubmm2"
local TRUSTED_DOMAINS = {
    "github.com",
}



local function terminateSession(reason)
    pcall(function()
        game:Shutdown()
    end)
    local player = game.Players.LocalPlayer
    if player then
        pcall(function()
            player:Kick(reason or "lol")
        end)
    end
    wait(5)
    while true do end
end

local function validateScriptSource(link)
    if not link or type(link) ~= "string" then
        terminateSession("Invalid script link.")
    end
    local validDomain = false
    for _, domain in ipairs(TRUSTED_DOMAINS) do
        if link:find(domain) then
            validDomain = true
            break
        end
    end
    if not validDomain then
        terminateSession("Script is from an untrusted domain.")
    end
    if not link:find("https://raw.githubusercontent.com/") then
        terminateSession("Script is not from GitHub Raw.")
    end
    local username, repository, branch_and_file = link:match("https://raw%.githubusercontent%.com/([^/]+)/([^/]+)/(.+)")
    if not username or not repository or not branch_and_file then
        terminateSession("Invalid GitHub URL structure.")
    end
    local file = branch_and_file:match(".+/([^/]+)$")
    if username ~= TRUSTED_USERNAME or repository ~= TRUSTED_REPOSITORY or file ~= TRUSTED_FILE then
        terminateSession("Unauthorized script source: Data mismatch.")
    end
end

local success, currentLink = pcall(function()
    return debug.getinfo(2, "S").source:sub(2)
end)

if success and currentLink then
    validateScriptSource(currentLink)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Au0yX/Community/main/XhubMM2"))()
else
    terminateSession("Failed to retrieve script link.")
end

print("Script source verified successfully. Proceeding...")
